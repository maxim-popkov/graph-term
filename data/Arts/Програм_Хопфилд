Костенко В.А., Винокуров А.В. Локально-оптимальные алгоритмы построения расписаний, основанные на использовании сетей Хопфилда // Программирование. - 2003. - №4 - С.27-40.
ЛОКАЛЬНО-ОПТИМАЛЬНЫЕ АЛГОРИТМЫ ПОСТРОЕНИЯ РАСПИСАНИЙ, ОСНОВАННЫЕ НА ИСПОЛЬЗОВАНИИ СЕТЕЙ ХОПФИЛДА

Костенко В.А., Винокуров А.В.
Факультет вычислительной математики и кибернетики МГУ
119899, Москва, Воробьевы горы

В работе рассматриваются локально-оптимальные алгоритмы построения расписаний выполнения программ в многопроцессорных вычислительных системах, основанные на использовании сетей Хопфилда, и приводятся результаты исследования разработанных алгоритмов.

Введение
В работах [1,2] показано, что большинство задач построения расписаний являются NP-полными в строгом смысле. NP-полнота задач построения расписаний обусловила широкое применение для их решения эвристических алгоритмов, основанных на жадных стратегиях [3,4], и итерационных алгоритмов [3-5]: генетические и эволюционные алгоритмы, алгоритмы имитации отжига, алгоритмы случайного поиска (ненаправленного, направленного, направленного с самообучением), алгоритмы детерминированной коррекции расписания.
Жадные алгоритмы не обладают свойством локализации оптимального решения. Итерационные алгоритмы для локализации оптимального решения требуют специальной настройки параметров, при которых число итераций алгоритма увеличивается и очень часто снижается качество получаемых решений из-за попадания в “плохой” локальный оптимум. Использование сетей Хопфилда [6,7] в алгоритмах построения расписания было обусловлено их свойством быстрой локализации ближайшего оптимума.

1. Постановка задачи построения расписаний
Общая задача построения статических (априорных) расписаний заключается в распределении и упорядочивании множества фиксированных работ (процессов) на заданное число ресурсов (процессоров) таким образом, чтобы оптимизировать желаемую меру эффективности и выполнить заданные ограничения. Прежде чем конкретизировать постановку задачи построения расписаний, определим модели исходных данных и расписания.
При определении модели прикладной программы предполагаем, что выделение работ, подлежащих планированию, и параллелизм, допускаемый при выполнении программы, заданы (выявлены) предварительно. В качестве модели прикладной программы будем использовать частный случай инварианта поведения программы, предложенного в работах [8,9].
Инвариант поведения программы H(PR) (отражает свойства, которые должны сохраняться независимо от среды реализации программы [8]) определим множеством процессов , составляющих программу, и отношением частичного порядка ={ik=(pi,pk)}(i,k)Î(1...N) на множестве P. Отношение ik представляется следующим образом: если , то процесс pi, необходимо выполнить до начала выполнения процесса pk. На  накладываются условия ацикличности и транзитивности. Каждый процесс имеет свой уникальный номер и метку вычислительной сложности. Нумерация процессов является сквозной и удовлетворяет условиям полной топологической сортировки. Вычислительная сложность процесса позволяет оценить время его выполнения на процессоре. Отношение ik определяется номерами смежных процессов и имеет метку, соответствующую объему данных обмена. Объем данных обмена для каждой связи из  позволяет оценить затраты времени на выполнение внешнего взаимодействия.
Модель расписания выполнения программы [3,4,10] определим набором упорядоченных списков (ветвей параллельной программы) {SPi}i=(1...M) и отношением частичного порядка HP на множестве P: HP=({SPi}i=(1...M),HP). SPi образуются процессами, распределенными на один и тот же процессор (M – число процессоров в ВС). Отношение частичного порядка HP на множестве P определим как объединение отношений: HP=c1M, i - отношение полного порядка на SPi, которое определяется порядковыми номерами процессов в SPi; c - набор секущих ребер, которые определяются связями процессов, распределенных на разные процессоры. Если процессы pi и pj распределены на разные процессоры и в  существует связь ij, то она определяет секущее ребро в HP. На HP накладываются условия ацикличности и транзитивности.
Таким образом, расписание выполнения программы определено, если для каждого процесса из множества P заданы: 1)привязка к одному из списков SPi, i(1...M); 2)порядковый номер в соответствующем списке.
Расписание HP является допустимым (интерпретируемо и сохраняет инвариант поведения программы), если выполнены следующие ограничения [3,10,11]:
1. Каждый процесс должен быть назначен на процессор (в SPi): .
2. Каждый процесс должен быть назначен лишь на один процессор (в один SPi): .
3. Частичный порядок, заданный в H должен быть сохранен в HP: .
4. Расписание HP должно быть беступиковым. Условием беступиковости при неограниченном объеме буферов обмена является отсутствие контуров в графе HP: .
В дальнейшем будем говорить, что расписание допустимо , если оно удовлетворяет ограничениям 1-4. Нижний индекс в  указывает ограничения, налагаемые на расписание.
Задачу построения расписаний будем рассматривать в следующем варианте постановки.
Для заданных:
H(PR)=(P,)- инварианта поведения программы,
HW- архитектуры вычислительной системы (ВС): число процессоров фиксировано (M), однородная по типу процессоров, полносвязная,
требуется определить:
HP=({SPi}i=(1...M),HP)- расписание выполнения программы,
при этом должны выполняться условия:
T=f(HP,HW)®min – время выполнения расписания должно быть минимальным,
- должны выполняться ограничения 1-4.
Поскольку класс архитектур ограничен полносвязными однородными архитектурами, вычислительную сложность процессов будем задавать временем выполнения . С учетом однородности и полносвязности архитектуры в это время можно включить затраты времени на взаимодействие с процессами других процессоров.

2. Сети Хопфилда и проблемы их применения для решения задач комбинаторной оптимизации
В общем случае нейросеть может иметь произвольные обратные связи, по которым переданное возбуждение возвращается данному нейрону, и он повторно изменяет свое состояние. Нейродинамика в таких системах становится итерационной. Безитерационная динамика состояний нейронов является, очевидно, всегда устойчивой. Обратные связи могут приводить к возникновению неустойчивости. В нейронных сетях с обратными связями неустойчивость проявляется в блуждающей смене состояний нейронов, не приводящей к возникновению стационарных состояний. В общем случае ответ на вопрос об устойчивости динамики произвольной нейросети с обратными связями крайне сложен и до настоящего времени является открытым.
Модель нейросети Хопфилда (J.J. Hopfield) [6] является частным случаем нейросетевой архитектуры с обратными связями, для которой свойства устойчивости хорошо исследованы. Рассмотрим нейросеть, состоящую из N формальных нейронов (рис.1). Любой нейрон характеризуется степенью возбуждения (состоянием) , . Каждый нейрон связан со всеми остальными (граф, описывающий сеть, - полный). Силу связи (вес связи) -го нейрона с -ым обозначим . В модели Хопфилда предполагается условие симметричности связей  с нулевыми диагональными элементами .

Рис.1. Нейросеть с обратными связями.

Изменение состояния каждого нейрона  в модели Хопфилда происходит по правилу для формальных нейронов МаккКаллока-Питтса. Поступающие на входы -го нейрона сигналы  в момент времени  взвешиваются с весами матрицы связей и суммируются, определяя полный уровень силы входного сигнала :

Далее в момент времени  нейрон определяет свое состояние в зависимости от уровня сигнала и индивидуального порога  [6,7]:

Определение состояния может носить стохастический характер - выбирается произвольный нейрон и его состояние определяется по выше приведенному правилу - стохастическая динамика [7]. Возможно одновременное определение состояний всех нейронов, тогда говорят о параллельной динамике [7]. Также рассматривается и последовательная динамика [7], при которой определение состояний нейронов происходит циклично, по одному нейрону за итерацию. Многочисленные исследования показали, что свойства нейросети практически не зависят от типа динамики. При моделировании нейросети на обычном компьютере удобнее использовать стохастическую или последовательную динамику, а в аппаратных реализациях нейросети Хопфилда применяется параллельная динамика.
Совокупность значений состояния всех нейронов в некоторый момент времени образует  - вектор состояния сети. Нейродинамика приводит к изменению вектора состояния . Конец вектора состояний при этом описывает траекторию в пространстве состояний нейросети. Это пространство для сети с двумя уровнями возбуждения каждого нейрона представляет собой множество вершин гиперкуба размерности , равной числу нейронов. Возможные наборы значений координат вершин гиперкуба определяют возможные значения вектора состояний.
Рассмотрим проблему устойчивости динамики изменения состояний. Определим энергию нейросети Хопфилда следующим образом [6,7]:
.
Поскольку на каждом временном шаге некоторый нейрон  изменяет свое состояние в соответствии со знаком величины , то всегда верно следующее неравенство:
, где 
 - вклад -го нейрона в энергию нейросети.
Таким образом, энергия нейросети , может либо убывать, либо сохранять свое значение в процессе нейродинамики.
Поскольку число нейронов в сети конечно, функция E ограничена снизу и обладает свойством невозрастания при изменении состояний нейронов, то она является для нейросети функцией Ляпунова. Поведение такой динамической системы устойчиво при любом исходном векторе состояний  и при любой симметричной матрице связей  с нулевыми диагональными элементами. Сеть приходит в стационарное состояние в одном из минимумов функции Ляпунова, причем состояния всех нейронов будут совпадать по знаку с входными сигналами .
Задача составления расписаний относится к классу задач комбинаторной оптимизации с ограничениями. В зависимости от способа представления расписаний [3,10] задача может быть представлена как бинарная или целочисленная задача оптимизации с ограничениями. В отличие от задач целочисленного или бинарного математического программирования комбинаторный характер задачи создает проблему согласованного изменения задающих расписание переменных для получения на очередной итерации алгоритма допустимого варианта расписания. Данные свойства задачи делают неприемлемым использование традиционных локально-оптимальных методов, например градиентных. Для локальной оптимизации (улучшения) расписаний используются алгоритмы, основанные на перестановке отдельных процессов в соответствии с некоторыми локальными критериями эффективности [12,13]. Однако подобные алгоритмы не гарантируют нахождение локального оптимума. Использование сетей Хопфилда в алгоритмах построения расписаний делает возможным гарантированное нахождение локального оптимума.
Применение сетей Хопфилда для решения задач комбинаторной оптимизации с ограничениями требует решения следующих проблем:
1. Выбор “нейронного” представления задачи – установление соответствия между состояниями нейронов и значениями оптимизируемых параметров.
2. Построение функции энергии сети с учетом целевой функции и ограничений и приведение ее к симметричной квадратичной форме. Функция энергии сети в точках минимума целевой функции должна также иметь точки минимума. При нарушении ограничений должны вводится штрафы, увеличивающие значение функции энергии.
3. Определение значений весов сети и порогов, т.е. установление соответствия между членами в построенной функции энергии сети и членами общей формы энергии сети.
4. Определение весовых коэффициентов при штрафных функциях.

3. Построение расписаний для набора независимых процессов
В данном разделе рассмотрим сети Хопфилда и результаты их исследования для решения задачи построения расписаний при . В этом случае для сохранения инварианта поведения программы достаточно выполнение лишь первых двух ограничений на расписание, т.е. .
Нейронное представление расписания можно задать, используя лишь матрицу привязки [3,10,11] S(HP)NM, где элемент матрицы определяется:
.
Вектор состояний нейросети Хопфилда имеет размер и может быть представлен в виде матрицы:
	, 
где M – количество процессоров, N – количество процессов.
Для данной конфигурации нейросети Хопфилда общая форма функции энергии имеет следующий вид:
.
Рассмотрим функцию , где 
,  , - время выполнения процесса ,
,
.
Функция отвечает за равномерное распределение процессов по процессорам. Функциииявляются штрафными функциями, они отвечают за выполнения ограничений 1 и 2 соответственно.  отвечает за то, чтобы каждый процесс был назначен на процессор (в SPi),  отвечает за то, чтобы каждый процесс был назначен лишь на один процессор (в один SPi).
Чтобы использовать нейросеть Хопфилда для минимизации функции  необходимо вычислить весаи порогинейросети. Для этого нужно разрешить уравнениев смысле неизвестныхи . Если веса и пороги задать следующим образом:
,
, 
,
то получим (см. приложение 1), что функция  равна энергии с точностью до константы: 
, 
Из этого равенства следует, что минимумы функции энергии  совпадают с минимумами функции , т.е. функция  будет минимизироваться в процессе динамики нейросети.
Для окончательного решения задачи необходимо найти . Без ограничений общности можно считать  и искать только коэффициенты и. Коэффициенты  и  при штрафных функциях оказывают сильное влияние на динамику нейросети Хопфилда и являются предметом исследования. Ниже приведены результаты численных исследований для .

Результаты численного исследования
В таблицах1-4 приведены результаты численного исследования алгоритма. Для каждого графа производилось 1000 запусков алгоритма. Во всех таблицах используются следующие обозначения:
- число процессов;
- суммарное время работы всех процессоров на ВС с одним процессором:;
- среднее отклонение : ;
- минимальное из ;
-максимальное из ;
-число процессоров;
- лучшее из времен выполнения расписаний, полученных алгоритмом;
- загрузка процессоров, соответствующая:  ;
- среднее время выполнения расписаний, получаемых алгоритмом, по всем запускам;
- среднее число итераций, производимое алгоритмом (включая те случаи, когда алгоритм сходится к недопустимому решению), одна итерация сети – срабатывание одного нейрона;
 - величина, показывающая процент допустимых решений из общего числа запусков;
- время выполнения расписания, полученного эвристикой;
 - загрузка процессоров, полученная эвристикой.
В таблице 1 начальное приближениезадается случайным образом, т.е. для используется следующее распределение вероятностей: :

Таблица 1

Исследования показали, что количество корректных решений составляет в среднем 33.8% процентов, при этом процент загрузки процессоров 98.8%, количество итераций в среднем составляет.
В таблице 2 начальное приближениезадается с помощью эвристики [14].

									Таблица 2.

В случае если начальное приближение получено эвристикой процент допустимых решений в среднем возрастает до 55.6%, процент загрузки процессоров снижается в среднем до 95.5%, число итераций снижается до . Эти три явления связаны с тем, что в данном случае сеть Хопфилда скатывается к ближайшему локальному минимуму. Как видно из таблицы 2, разным начальным приближениям могут соответствовать разные локальные минимумы. 
Влияние размеров задачи приведено в таблице 3, - варьируются, , начальное приближениезадается случайным образом.

									Таблица 3.

В среднем с ростомзагрузка процессоров увеличивается. Это связано с тем, что при  и увеличениизначения  уменьшаются. С ростом числа процессоров их загрузка уменьшается. Количество корректных решений с ростомпадает, а с ростом в среднем возрастает. 
Влияние среднего отклонения  приведено в таблице 4, , , , - варьируется, начальное приближениезадается случайным образом.

									Таблица 4.

Исследования влияния значения среднего отклонения  показали, что по мере уменьшения отклонения процент корректных решений возрастает и уменьшается количество итераций.

4. Построение расписаний для процессов с произвольными связями
Если , то для сохранения инварианта поведения программы необходимо выполнение ограничений 1-4 на расписание, т.е. . Были рассмотрены различные варианты нейронного представления расписания при . Самый экономичный (из рассматривавшихся) вариант представления расписаний, позволяющий построить функцию энергии сети, требует  нейронов. Количество слагаемых в функции энергии сети, отвечающих за штрафы, при этом возрастает до семи. Некоторые из этих слагаемых имеют четвертую степень. При сведении построенной функции энергии сети к квадратичной форме пришлось сделать ряд априорных допущений. Возникает также проблема выбора значений весовых коэффициентов при слагаемых в функции энергии сети.
Вычислительные эксперименты с построенной сетью (при использовании асинхронной случайной динамики) показали ее низкую эффективность с точки зрения процента получаемых допустимых вариантов расписания. При случайном задании HP0 число допустимых расписаний (), получаемых сетью, составляет всего 0.5%.
В следующем разделе рассматривается подход позволяющий решить проблему получения недопустимых вариантов расписаний сетью Хопфилда при.

5. Комбинирование сети Хопфилда и жадных эвристических алгоритмов
Из приведенных в работах [3,5] свойств жадных и генетических алгоритмов следует, что изменение привязки процессов к процессорам оказывает более сильное влияние на время выполнения расписания, чем изменение порядка выполнения процессов на процессорах при фиксированной привязке.
На основании свойства о влиянии привязки и порядка можно предложить следующий комбинированный алгоритм построения расписаний:
1. Получение привязки сетью Хопфилда при предположении .
2. Получения порядка жадным эвристическим алгоритмом с учетом привязки, полученной в п.1, и заданного .
Утверждение 1. Локальному оптимуму  функции T=f(HP,HW) для HP без учета  (т.е. в предположении ), может соответствовать множество локальных оптимумов функции T=f(HP,HW) для HP с учетом .
Зафиксируем привязку процессов к процессорам для некоторого локального оптимума при . Тогда различные варианты расписания будут отличаться лишь порядком процессов на процессорах. Если  при , то при  соответствующее . При  все эти варианты расписаний имеют одно и тоже время выполнения . При  различные варианты могут иметь различное время выполнения. Следовательно, возможно, что в этом случае одной и той же привязке процессов к процессорам будет соответствовать некоторое множество локальных оптимумов.
Утверждение 2. Значение  является нижней гранью множества .
Справедливость этого утверждения следует из того, что любое расписание из множества  является также допустимым вариантом расписания  при предположении  () и всегда выполняется неравенство .
Предположение 1. Если  и  два различных локальных оптимума при , ,  соответствующие им множества локальных оптимумов при  и , то справедливо .
Если предположение 1 справедливо и выполняется условие “различные способы привязки процессов к процессорам оказывают более сильное влияние на время выполнения расписания, чем различные способы порядка выполнения процессов на процессорах при фиксированной привязке”, то комбинированный алгоритм “сеть Хопфилда-эвристика” может находить с высокой скоростью достаточно близкий вариант расписания к одному из локальных оптимумов соответствующих заданному начальному приближению HP0 (в зоне притяжения HP0 находится соответствующий множеству  локальный оптимум ) и полученное .
Ниже описан алгоритм получения порядка с одновременным получением оценки времени выполнения расписания. Все процессы  разобьем на три множества: . Где - множество процессов, распределенных в SP (определен порядковый номер рабочего интервала) алгоритмом на предыдущих шагах, - множество процессов, у которых все предшественники (в соответствии с отношением) принадлежат множеству, - множество процессов, у которых хотя бы один из предшественников не принадлежит множеству. Приведём алгоритм получения порядка при известной привязке процессов к процессорам:
1. Полагаем, - содержит процессы без предшественников, - все остальные процессы.
2. Находим в  процесс с наибольшим приоритетом и переносим его в , одновременно определяем время его инициализации.
3. Проверяем  с целью возможности переноса процессов в (все предшественники принадлежат).
4. Если , то переходим к шагу 2, иначе завершаем работу.
Модификации этой эвристики отличаются способом введения приоритетов. Для численного исследования алгоритма была выбрана схема приоритетов, основанная на том, что наивысшим приоритетом во множестве  обладает тот процесс, который обеспечивает наименьший простой соответствующего процессора из-за ожидания инициализации процесса.

Результаты численного исследования
Результаты численного исследования алгоритма “сеть Хопфилда – эвристика“ приведены в таблицах 5 и 6. Дополнительные обозначения, используемые в таблицах 5 и 6:
 - критический путь (по времени выполнения);
 - тип графа: - ориентированное дерево, - ориентированный граф с произвольной структурой связей,  - набор цепочек.
В таблице 5 приведены результаты численного исследования при задании начального приближенияслучайным образом. 

									Таблица 5.

В таблице 6 приведены результаты численного исследования при задании начального приближенияс помощью эвристики [14].

										Таблица 6.

Исследования показали, что для графов с произвольными связями и деревьев алгоритм улучшает решение, полученное эвристикой. Время выполнения уменьшается в среднем на 15.8%. Для набора цепочек (Chain) и некоторых видов деревьев (Tree) алгоритм дает плохое решение. Для набора цепочек решения, получаемые эвристикой, даже лучше. В этом случае качество решения, возможно, удастся улучшить подбором алгоритма получения порядка. Все полученные решения очень сильно зависят от начального приближения.

6. Проблемы мультистарта и увеличения скорости сходимости
Автономное использование сетей Хопфилда
Автономное использование сетей Хопфилда или комбинированного алгоритма (“сеть Хопфилда-эвристика“) для решения задачи построения расписаний создает проблему выхода из локальных оптимумов. Что присуще всем локально-оптимальным алгоритмам. Данная проблема обычно решается введением механизма мультистарта. При произвольном задании начального приближения HP0 количество стартов для нахождения приемлемого варианта решения может быть велико. Что объясняется нерегулярностью (большим количеством локальных оптимумов) функции T=f(HP,HW).
Для решения проблемы уменьшения числа стартов алгоритма предлагается ввести обратную связь, т.е. очередное начальное приближение HP0 выбирать не произвольным образом, а направленной коррекцией расписания, полученного на предшествующем старте алгоритма.
Направленная коррекция предполагает анализ расписания, полученного на предшествующем старте алгоритма. При анализе расписания выделяются следующие множества процессов:
- множество процессов, которые обуславливают простои процессоров,
- множество процессов, которые обуславливают задержки инициализации (из-за ожидания завершения их выполнения) процессов из множества .
Направленная коррекция расписания с целью получения очередного начального приближения HP0 может осуществляться двумя способами:
1. Для процессов из множества , которые обуславливают простой процессоров превосходящих заданный порог , и соответствующих им процессов из множества  применяется операция O2 – перестановки их в другой SP [3,10,11].
2. Для процессов из множества , которые обуславливают простой процессоров превосходящих заданный порог , и соответствующих им процессов из множества  осуществляется увеличение (для процессов из ) и уменьшение (для процессов из) времени их выполнения на значение . Сеть Хопфилда работает с моделью H, в которой используются измененные времена выполнения процессов. Эвристика и вычисление значения функции T=f(HP,HW) осуществляется для исходно заданных времен выполнения процессов. Данный способ можно рассматривать как алгоритм обучения сети Хопфилда, поскольку для каждого запуска пересчитываются значения весов сети.

Возможность увеличения скорости сходимости
Скорость сходимости сети Хопфилда, может быть увеличена введением парной динамики: если некоторый нейрон изменил свое состояние (например, в первой строке матрицы S(HP)NM появилась еще одна единица), то проверяется на возможность изменения состояния соответствующий ему парный нейрон или группа нейронов (нейрон первой строки находящийся в состоянии “1”). Если данный нейрон не изменяет своего состояния, то он заносится в “черный” список. Нейроны из “черного” списка определяют свое состояние с повышенной частотой.

Заключение
Разработанные сети Хопфилда для решения задач построения расписаний ориентированы на совместное применение с жадными и итерационными эвристическими алгоритмами. Сеть Хопфилда использует в качестве начального приближения расписание, полученное эвристическим алгоритмом, и осуществляет его доводку до соответствующего локального оптимума. Приведенные результаты вычислительных экспериментов показали высокую скорость локализации оптимума и возможность улучшения качества расписаний, получаемых эвристическими алгоритмами.
При введении механизмов мультистарта возможно автономное использование разработанных сетей Хопфилда для решения задач построения расписаний.
Комбинированный алгоритм (“сеть Хопфилда-эвристика”) легко позволяет расширить область применения для более общих моделей инварианта поведения программы и расписаний: процесс может содержать более одного рабочего интервала. Единицами планирования в этом случае являются рабочие интервалы. То есть комбинированный алгоритм может быть использован при решении задач многостадийного планирования.

Список литературы
1. Теория расписаний и вычислительные машины/ Под ред. Э.Г.Коффмана. М.: Наука, 1984. - 334с.
2. Гэри М., Джонсон Д. Вычислительные машины и трудно решаемые задачи. - М.: Мир, 1982. - 416с.
3. Костенко В.А. Построение расписаний при совместном проектировании аппаратных и программных средств ВС реального времени// Труды Меж. конф. "Параллельные вычисления и задачи управления" (РАСО'2001) - М.: ИПУ РАН, 2001., с.125-141.
4. Костенко В.А. Задачи синтеза архитектур: формализация, особенности и возможности различных методов для их решения// Программные системы и инструменты. Тематический сборник. - M.: МАКС Пресс, 2000., № 1, С.31-41.
5. Костенко В.А., Смелянский Р.Л., Трекин А.Г. Синтез структур вычислительных систем реального времени с использованием генетических алгоритмов// Программирование, 2000., №5, С.63-72.
6. Hopfield J.J. Neural networks and physical systems with emergent collective computational abilities. Proceedings of the National Academy of Science, 1982.
7. Уоссермен Ф. Нейрокомпьютерная техника: Теория и практика. – М.: Мир, 1992. – 240с.
8. Смелянский Р.Л. Об инварианте поведения программ// Вестн. МГУ, сер. 15, Вычислительная математика и Кибернетика, 1990., No. 4, С. 54-60.
9. Смелянский Р.Л. Модель функционирования распределенных вычислительных систем// Вестн. Моск. Ун-та. сер 15, Вычисл. Матем. и Кибернетика. 1990, No. 3, стр. 3-21.
10. Костенко В.А. Задача построения расписания при совместном проектировании аппаратных и программных средств// Программирование, 2002., . №3, С.1-16.
11. Костенко В.А. Способы представления и преобразования расписаний в итерационных алгоритмах// Программные системы и инструменты. Тематический сборник. - M.: МАКС Пресс, 2001., № 2, С.53-69.
12. P.Brucker, J.Hurink, F.Werner. Improving local search heuristics for some sheduling problems. Discrete Applied Mathmatics, 1997., N 72, pp.34-72.
13. Григорьева Н.С.,Федорова И.А. Алгоритмы поиска в локальной окрестности для задачи параллельного упорядочивания// Дискретная математика и математическая кибернетика: Труды международной школы-семинара. – М.: МАКС Пресс, 2001. – С.18.
14. Костенко В.А., Романов В.Г., Смелянский Р.Л. Алгоритмы минимизации аппаратных ресурсов ВС// Искусственный интеллект (Донецк), 2000., No2, С.383-388.

Приложение 1.
Определение весов сети и порогов.
В данном приложении приведен вывод значений весов и порогов нейросети Хопфилда для задачи построения расписания при . Преобразуем функции , ,  к виду квадратичной формы:






Таким образом, функция  принимает следующий вид:


Если веса и пороги задать следующим образом:
,
, 
где ,
то получим, что функция равна энергии с точностью до константы: 
.

