Костенко В.А., Гурьянов Е.С. Алгоритм построения расписаний обменов по шине с централизованным управлением и исследование его эффективности // Программирование. - 2005. - №6 - С.67-76.
АЛГОРИТМ ПОСТРОЕНИЯ РАСПИСАНИЙ ОБМЕНОВ ПО ШИНЕ С ЦЕНТРАЛИЗОВАННЫМ УПРАВЛЕНИЕМ И ИССЛЕДОВАНИЕ ЕГО ЭФФЕКТИВНОСТИ

Костенко В.А., Гурьянов Е.С.

Факультет ВМиК МГУ им. М.В. Ломоносова, Россия
119992, Москва, ГСП-2, Ленинские горы, МГУ, 2-й уч. корпус, ф-т ВМиК, 
тел.: (095) 939-46-71, Email: kost@cs.msu.su


Введение

В некоторых системах реального времени и, в частности, в бортовых системах часто возникает проблема построения статического расписания обменов по централизованному каналу обменов (шине). Как правило, оконечными устройствами шины являются различные процессоры, датчики, контролирующие устройства. Они обмениваются (обычно периодически) результатами измерений и управляющей информацией.
Расписание, по которому происходят такие обмены, формируется статически и не может быть изменено динамически (в ходе работы системы). В соответствии с ним разрабатываются канальные программы обменов.
При построении расписания должны быть учтены различные виды ограничений, которые определяются допустимыми режимами работы конкретной бортовой системы и типом контроллера шины. Примерами таких ограничений являются максимально допустимая длина цепочки работ, следующих непрерывно друг за другом, и минимально необходимый интервал времени между цепочками работ, на котором не запланированы никакие обмены.
Для построения расписания обменов разработан эвристический алгоритм, допускающий настройку на ограничения, определяемые конкретной бортовой системой. Основные принципы построения алгоритма были кратко сформулированы в работе [1]. В основу алгоритма положены жадный принцип распределения работ в расписание в соответствии с локальным критерием "самый ранний срок возможного завершения выполнения работы" и проверка на каждом шаге оптимальности этого критерия. Если этот критерий на некотором шаге не является оптимальным, то осуществляется вызов эвристической процедуры выбора очередной работы для размещения в расписание. 
На каждом шаге алгоритма (после размещения очередной работы в расписание) вычисляется ближайший такт шины, с которого может выполняться следующая работа и соответственно корректируются допустимые временные интервалы для выполнения еще не распределенных в расписание работ. Учет ограничений, определяемых режимом работы бортовой системы и типом контроллера шины, осуществляется введением процедур проверки выполнения ограничений на каждом шаге алгоритма и корректировкой в соответствии с условиями ограничений ближайшего такта шины, с которого может выполняться следующая работа. 
В данной работе также приведены условия для исходных данных, при которых алгоритм строит оптимальные расписания и результаты экспериментального исследования алгоритма.


Постановка задачи построения расписаний обменов по шине с централизованным управлением

Краткое описание системы и протокола работы шины

В данном подразделе приведем пример конкретной бортовой системы и протокола работы шины. Описание системы и протокола работы шины ограничим уровнем детализации необходимым лишь для понимания формальной постановки задачи построения расписаний обменов по шине с централизованным управлением.
Система состоит из единственного канала обмена (шины) и ограниченного набора оконечных устройств, подключенных к этому каналу, которые являются источниками/приемниками информации, передаваемой по шине. Одно из оконечных устройств назначается контроллером шины, который управляет обменом информации и осуществляет контроль состояния других оконечных устройств. Эти оконечные устройства лишь выполняют адресованные им команды контроллера. Обмен информацией осуществляется асинхронно путем поочередной передачи информации по принципу "команда-ответ". Информация передается в виде сообщений, которые могут состоять из командных слов, слов данных и ответных слов.
В дальнейшем будем полагать, что форматы сообщений соответствуют стандарту MIL [2]. Стандарт MIL допускает основные и групповые форматы сообщений. Форматы основных сообщений используются для передачи информации одному из оконечных устройств и предусматривают выдачу им ответного слова. Форматы групповых сообщений используются для передачи информации одновременно нескольким оконечным устройствам без выдачи ими ответных слов. Последняя группа форматов обеспечивает понижение загрузки шины, но при этом снижается надежность. Если требуется подтверждение факта приема оконечным устройством группового сообщения, то контроллер в этом случае (используя формат основного сообщения) может послать оконечному устройству команды “передать ответное слово” или “передать последнюю команду”, и факт приема группового сообщения может быть установлен контроллером путем анализа в ответном слове признака “принято групповое сообщение”. Каждый формат определяет количество и порядок следования командных слов, ответных слов и слов данных. Ниже приведены примеры форматов одиночного сообщения (рис.1) и группового сообщения (рис.2) (КС – командное слово, ОС – ответное слово, СД – слово данных, t1, t2 – паузы).
	Одиночное сообщение (передача данных от оконечного устройства оконечному устройству).



Рис.1. Пример формата одиночного сообщения.

Контроллер должен без паузы передать команду обмена данными с адресом оконечного устройства А на прием данных и команду обмена данными с адресом оконечного устройства Б на передачу данных. Оконечное устройство Б после установления факта достоверности принятой команды должно передать без пауз ответное слово и указанное в команде количество слов данных. Оконечное устройство А после установления факта достоверности адресованной ему информации должно передать ответное слово.
	Групповое сообщение (передача данных от оконечного устройства оконечным устройствам).



Рис.2. Пример формата группового сообщения.
Контроллер должен передать без паузы групповую команду обмена данными на прием данных и команду обмена данными с адресом одного оконечного устройства на передачу данных. Это оконечное устройство после установления факта достоверности принятого командного слова должно передать без пауз ответное слово и указанное в команде количество слов данных.

Формальная постановка задачи построения расписания обменов по шине

Шина в данной системе может рассматриваться как одноприборное устройство, обслуживающее исходно заданный набор работ: . Для каждой работы известны: 
ti - время ее выполнения (оно однозначно определяется количеством слов и пауз в сообщении, соответствующем данной работе, и частотой работы шины); 
 - директивные сроки (директивный интервал) , в течении которых работа должна быть выполнена, т.е. передано соответствующее работе сообщение по шине (директивные сроки определяются требованиями работы в реальном масштабе времени оконечных устройств).
В дальнейшем будем полагать, что .
Расписание обменов по шине – это упорядоченный список непересекающихся по времени выполнения работ, в котором каждая работа определяется временем старта и временем окончания:
, где i, j - порядковые номера работ в расписании.
Для формулировки дополнительных ограничений на расписание, определяемых допустимыми режимами работы бортовой системы и типом контроллера шины, введем понятие цепочки работ. Цепочка работ – это последовательность работ, следующих непрерывно друг за другом, т.е. .
Расписание обменов корректно, если выполнены следующие дополнительные ограничения:
1. Длина любой цепочки работ в расписании не превосходит исходно заданной максимально допустимой длины k*.
2. Cвободный интервал времени (не запланированы никакие обмены) между любыми двумя последовательными цепочками работ не меньше исходно заданной минимально необходимой величины t*.
Первое ограничение определяется объемом буфера сообщений у контроллера шины, второе - необходимостью обработки внештатных ситуаций, которые могут возникнуть в ходе работы бортовой системы (например, восстановимый отказ одного из оконечных устройств).
Критерием оптимальности расписания (целевой функцией) является максимальное число работ (из исходно заданного набора), размещенных в расписание без нарушения ограничений. Расписание SP является оптимальным, если для любого другого расписания , построенного на тех же исходных данных, количество размещенных работ в  не превосходит количества размещенных работ в расписании SP.
Данная задача относится к классу задач построения расписаний без прерываний для детерминированных систем обслуживания с одним прибором [3-5]. Однако она имеет отличия от постановок задач рассматриваемых в теории расписаний. Постановки задач, обычно рассматриваемые в теории расписаний [3-5], предполагают, что:
директивные сроки, в течении которых работа ai должна быть выполнена, задаются как , т.е. допустимые времена старта всех работ одинаковы,
нет дополнительных ограничений на корректность расписания.
Также наиболее распространенным случаем является случай, когда целевая функция задается как сумма "штрафов" или максимальное значения "штрафа" по всем работам при нарушении директивных сроков выполнения работ. В этом случае целевая функция является неубывающей кусочно-непрерывной функцией, что позволяет строить оптимальные алгоритмы полиномиальной сложности для решения задач построения расписаний с такой целевой функцией.
В работе [6] приведен оптимальный жадный алгоритм построения расписаний для системы работ с индивидуальными директивными сроками как для старта, так и для завершения работ и с целевой функцией "максимальное число работ (из исходно заданного набора) размещенных в расписание без нарушения директивных сроков". Однако при этом должно выполняться условие , а также недопустимы дополнительные ограничения.
Предлагаемый в следующем разделе алгоритм позволяет снять ограничения, типичные для известных алгоритмов теории расписаний. Актуальность разработки такого алгоритма обусловлена необходимостью решения практических задач построения расписания обменов по шине с централизованным управлением.


Алгоритм построения расписания обменов

Введем обозначения и предикаты, которые потребуются для описания алгоритма.
Предикат intersect – пересечение директивных сроков двух работ:
.
Предикат compatible – совместимость двух работ:
, здесь  - самый ранний срок возможного завершения работы i,  - самый поздний срок возможного начала работы i.
Обозначим через  ближайший такт шины, с которого может выполняться очередная работа.
Алгоритм построения расписаний обменов (А1) можно представить следующей схемой:
1. Вызов процедуры разбиения списка работ SW на непересекающиеся по директивным срокам списки работ {SW1, SW2, SW3, …,  SWn}. Для любой пары списков SWi, SWj верно следующее условие:  "директивные сроки работ am, an не пересекаются".
Это позволяет свести исходную задачу к нескольким независимым подзадачам. Дальнейшие операции выполняются для каждой такой подзадачи.
2. Упорядочивание списка SWi по самому раннему сроку завершения f*. Задания с одинаковым временем завершения располагаем в произвольном порядке.
3. Жадный выбор из списка SWi: выбирается работа a0.
4. Вызов процедуры проверки дополнительных ограничений на корректность расписания при условии, что работа a0 будет добавлена в расписание. Если ограничения не выполнены – переходим к п.8.
5. Проверка оптимальности жадного выбора:

Если условие выполнено – переходим к п.7.
6. Вызов процедуры выбора работы из списка SWi для размещения в расписание (результат работы процедуры - номер работы, которая должна быть размещена в расписание на данном шаге алгоритма). На каждой итерации своей работы данная процедура осуществляет проверку дополнительных ограничений (аналогично п.4).
7. Перемещение выбранной в п.3 или п.6 работы (работа aj) из списка SWi в расписание SP. При этом полагаем: 
8. Вычисление ближайшего такта шины () с которого может выполняться следующая работа.
9. Корректировка директивных сроков каждой работы списка SWi:
1) если , положить ;
2) если , удалить работу из списка SWi.
10. Если список SWi не пуст, то переходим к п.2. Иначе – завершение работы алгоритма.

Пусть l – длина текущей цепочки работ в тактах,  - работа-кандидат на размещение в расписание.
Процедура проверки дополнительных ограничений на корректность расписания работает следующим образом:
если scur =  (директивное время старта текущей работы совпадает с ближайшим свободным тактом шины), проверить:  (текущая длина цепочки не будет превосходить максимально допустимую длину после размещения текущей работы в расписание);
иначе (scur > ), проверить  (в результате размещения текущей работы в расписание образуется пауза, величина которой будет не меньше минимально допустимой).
Процедура определения ближайшего свободного такта шины  работает следующим образом:
Если на предыдущем шаге в расписание была размещена j-я работа, положить . Иначе: если , положить: .
Процедура выбора работы из списка SWi для размещения в расписание может работать в одном из двух режимов: 
в режиме перебора с заданной глубиной, 
в режиме эвристики.
Стандартный алгоритм процедуры перебора.
Как частный случай, глубина может определяться размером списка, т.е. происходит полный перебор. Процедура рассматривает все работы списка, включая те работы, с которыми a0 не имеет пересечения директивных сроков. В результате перебора определяется максимальный набор совместимых работ. Среди всех максимальных наборов выбирается набор с наименьшим временем освобождения шины . В качестве результата процедуры возвращается номер первой работы в таком наборе.
Альтернативный алгоритм процедуры перебора.
1. Обозначим   работу, которая будет меняться на итерациях алгоритма. На первой итерации положим  = a0.
2. Формирование списка работ, имеющих с  непосредственное пересечение директивных сроков. Обозначим этот список буквой S.
3. Запустим по списку S перебор с глубиной n, , где n0 – параметр алгоритма (глубина перебора). В процессе перебора рассматриваются только те цепочки работ, для которых , где  – первая работа цепочки.
В результате перебора определим набор работ максимальной длины. Если таких наборов несколько, то выберем набор с наименьшим временем освобождения шины .
4. Если выбранный набор начинается с работы , тогда алгоритм останавливается и возвращает  в качестве результата.
5. Иначе – ="первая работа выбранного в п.3 набора" и переход к п. 2.
Скорость работы альтернативного алгоритма гораздо выше, чем у стандартного, т.к. в большинстве случаев он за одну итерацию возвращает решение. Следовательно, значительно сокращается множество перебираемых работ.
Алгоритм эвристического выбора.
Для каждой работы вычисляется «штраф за размещение в расписание» - количество работ, которые после размещения данной работы в расписание становятся неразмещаемыми (т.е. гарантированно не могут участвовать в результирующем расписании). Анализ ограничивается только теми работами, которые имеют с a0 непосредственное пересечение директивных сроков. В качестве результата эвристики возвращается номер работы с наименьшим штрафом.
В дальнейшем, в зависимости от используемой процедуры выбора работы для размещения в расписание, будем говорить, что алгоритм работает, соответственно, в режиме ограниченного перебора и в режиме эвристики.


Анализ эффективности алгоритма

Рассмотренный в предыдущем разделе алгоритм в общем случае не гарантирует получения оптимального решения. Однако при введении ограничений на структуру исходных данных (ограничений на взаимное расположения директивных интервалов работ, на совместимость работ при пересечении их директивных интервалов и на время выполнения работ) алгоритм гарантированно получает оптимальные решения при данных ограничениях. В данном разделе приведем пример таких ограничений и докажем оптимальность алгоритма в этом случае.
Будем говорить, что работа  имеет одно вложение, если существует лишь одна работа  из числа остальных работ, для которой выполняется следующее условие:
 .
Будем говорить, что работа имеет не больше двух пересечений,  если существует не более двух различных работ  и  (или хотя бы одна) из числа остальных работ, для которых выполняется следующее условие:
 и/или .
Теорема 1. Если выполнены следующие условия:
1. Каждая работа имеет не более одного вложения.
2. Каждая работа имеет не более двух пересечений (независимо от вложений).
3. Любые две вложенные работы совместимы в порядке (1; 2), где . Если они совместимы и в другом порядке, то требуется дополнительное условие: .
4. Если работы  и  пересекаются и , то ,
то алгоритм А1 построит оптимальное расписание обменов при работе в режиме эвристики.
Доказательство
Так как на структуру исходных данных в условии теоремы наложены жесткие ограничения, которые обеспечивают регулярную структуру взаимного расположения допустимых интервалов выполнения работ (рис. 3), то для доказательства оптимальности работы алгоритма достаточно доказать оптимальность его работы лишь на первых двух фрагментах (они включают в себя работы 1-4). В силу условий 3 и 4 всегда возможен следующий порядок выполнения работ: "1,2,3,4" и этот порядок является оптимальным. В случае другого порядка "2,1,…" возможны случаи когда работы 3 и 4 невозможно одновременно разместить в расписание без нарушения директивных сроков выполнения.



Рис.3. Структура взаимного расположения допустимых интервалов выполнения работ.

На первой итерации алгоритм выберет работу 1 для размещения в расписание. При размещении этой работы ни одна из работ не становится неразмещаемой (работы 1,2 совместимы по условию 3, работы 1,3 совместимы по условию 4). Для работы 3 штраф = 1, т.к. при ее размещении становится неразмещаемой работа 2. Работа 2 не будет выбрана, т.к.  или работы 2,1 несовместимы (условие 3). Далее алгоритм разместит работы 2,3,4. То есть, алгоритм гарантированно расположит работы рассматриваемых фрагментов в оптимальном порядке "1,2,3,4".
Аналогично можно показать оптимальность алгоритма и для более "сложных" условий, которые обеспечивают регулярную структуру взаимного расположения допустимых интервалов выполнения работ.
При определенных условиях алгоритм может отработать оптимально исключительно за счет жадного выбора работ. Пример таких условий показывает следующая теорема.
Теорема 2. Если для каждой итерации основного цикла алгоритма выполнено условие , или нет таких работ, для которых , то алгоритм строит оптимальное расписание обменов.
Доказательство.
Покажем, что существует оптимальное решение задачи, содержащее работу  (работу с наименьшим значением ) и алгоритм выберет ее для размещения в расписание. Поскольку работы в списке SWi упорядочены по самому раннему сроку завершения f*, и по условию теоремы, выполнено условие проверки оптимальности жадного выбора (п.5 алгоритма), то алгоритм выберет для размещения в расписание работу . Если в каком-то оптимальном расписании, работа  не содержится, то можно заменить в нем работу с самым ранним временем возможного завершения (работа ) на работу . Такая замена не нарушит условий совместимости работ и дополнительных ограничений, поскольку , а также не изменит их общего количества. Следовательно, существует оптимальное решение начинающееся с работы , и алгоритм выберет ее для размещения в расписание. 
Далее алгоритм (п.9 алгоритма) удалит все работы не совместимые с работой . После этого задача сводится к построению оптимального расписания из оставшихся работ (совместимых с работой ). То есть задача сведена к аналогичной задаче с меньшим числом работ. Рассуждая по индукции, получаем, что алгоритм строит оптимальное расписание при выполнении условия теоремы.
При выполнении условия теоремы ( или нет таких работ для которых ) все работы будут размещены в расписание обменов в соответствии с жадным выбором.
Что означает для исходных данных выполнение этого условия? Равносильное утверждение сформулировать невозможно, т.к. происходит постоянная корректировка директивных сроков. Но очевидно, что данное условие будет выполнено, если:
,
т.е. директивный интервал каждой работы не пересекается с директивными интервалами других работ, а если пересекается, то эти работы попарно несовместимы. 

Численное исследование алгоритма

Работу алгоритма будем оценивать по следующим критериям:
эффективность работы алгоритма - отношение количества работ в расписании к количеству работ в исходной системе работ (в дальнейшем всегда приводится в %);
количество работ, размещенных в расписание по жадному критерию (в дальнейшем всегда приводится в %).
Будем генерировать заведомо совместимые системы работ без дополнительных предположений о величине директивных интервалов работ (максимальное время работы шины – 1000 тактов; число работ в исходной системе – 50). На рисунках 4 и 5 приведены результаты работы алгоритма в режиме перебора и в режиме эвристики. 

Рис.4. Режим эвристики.

Рис.5. Режим ограниченного перебора.

Следует отметить, что эвристический режим работы алгоритма существенно быстрее режима перебора. Это объясняется тем, что для перебора используется дорогостоящая операция рекурсии. В связи с этим не применялась функция перебора с глубиной более 2, т.к. при большей глубине перебора время работы алгоритма становится неприемлемым. Тем не менее, в ряде задач операция перебора с большой глубиной может дать более хорошее решение, чем эвристика.
Из рисунков видно, что операция жадного выбора применяется относительно редко по сравнению с операцией перебора (эвристического выбора). Это объясняется тем, что директивные интервалы для работ в данном примере генерировались случайным образом по всему отрезку планирования, вследствие чего до 97% директивных интервалов имеют пересечение с директивным интервалом как минимум одной из работ, а это обстоятельство делает невозможным жадный выбор (см. п.5 алгоритма). 
Введем дополнительные предположения о величине директивных интервалов работ (относительно времени их выполнения). Предположим, что в худшем случае директивный интервал в два раза превосходит время, необходимое для выполнения работы. Тогда при тех же допущениях, что в предыдущих случаях, эвристический режим дает результаты приведенные на рисунке 6.

Рис.6. Результаты работы алгоритма при ограничении на исходные данные: "директивный интервал в среднем в два раза превосходит время, необходимое для выполнения работы".

Фиксируем загрузку шины на значении 50% и будем изменять величину отношение директивного интервала к времени выполнения работы. Расположим по оси абсцисс среднее отношение директивного интервала к времени выполнения работы. На рисунке 7 не показана эффективность алгоритма, т.к. она постоянна и в данном случае составляет от 99,9% до100%. Из графика приведенного, на рисунке 7,  видно, что если в исходной системе работ директивные сроки не более, чем в 2 раза превосходят времена выполнения работ, то большинство работ будет размещено в расписание в соответствии с жадным критерием.

Рис.7. Зависимость числа работ, разведенных по жадному критерию, от отношения директивного интервала к времени выполнения работы при загрузке шины равной 50%.


Заключение

Предложенный в данной работе алгоритм построения расписаний обменов по шине с централизованным управлением может быть легко адаптирован и к другим видам ограничений на расписание обменов, которые определяются допустимыми режимами работы и составом аппаратных средств конкретной бортовой системы. Для адаптации алгоритма достаточно лишь добавить процедуры проверки этих ограничений.
Результаты проведенных численных исследований подтвердили высокую эффективность работы алгоритма по критериям "число работ размещенных в расписание" и "время работы алгоритма". При загрузке шины равной 50% алгоритм на всех тестах построил оптимальное расписание обменов. Следует отметить, что для бортовых систем реального времени очень часто накладывается ограничение, что загрузка шины не должна превышать 50%. Приемлемые значения критериев "число работ размещенных в расписание" и "время работы алгоритма". могут быть достигнуты за счет индивидуальной настройки глубины перебора на конкретную специфику исходных данных или использованием специальной эвристики, настроенной на учет специфики исходных данных.
Подчеркнутые выше особенности алгоритма позволяют сделать предположение о эффективности его применения в системах автоматического построения циклограмм обмена по шине с централизованным управлением.


Литература.

1. Костенко В.А., Гурьянов Е.С. Алгоритм построения расписаний обменов по шине с централизованным управлением// Интеллектуализация обработки информации: тезисы докладов Международной научной конференции. - Симферополь: Крымский научный центр НАН Украины, 2004.
2. Государственный стандарт СССР «Интерфейс магистральный последовательный системы электронных модулей» ГОСТ 26765.52-87.
3. В.С. Танаев, В.В. Шкурба. Введение в теорию расписаний. - М.: Наука, 1975.
4. Конвей Р.В., Максвелл В.Л., Миллер Л.В. Теория расписаний. - М.: Наука, 1975.
5. Теория расписаний и вычислительные машины/ Под ред. Э.Г. Коффмана - М.: Наука, 1984.
6. Кормен Т., Лейзерсон Ч., Ривест Р. Алгоритмы: построение и анализ. - М.: МЦНМО, 2002.

