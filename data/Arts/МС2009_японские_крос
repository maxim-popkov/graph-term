Костенко В.А., Кунцьо С.Ю. Задача построения расписания обменов для вычислительных систем реального времени с коммутатором // Методы и средства обработки информации. Труды третьей Всероссийской научной конференции. - М.: Издательский отдел факультета ВМиК МГУ имени М.В. Ломоносова; МАКС Пресс, 2009. - С.259-265.

В.А. Костенко, Кунцьо С.Ю.
ЗАДАЧА ПОСТРОЕНИЯ РАСПИСАНИЯ ОБМЕНОВ ДЛЯ ВЫЧИСЛИТЕЛЬНЫХ СИСТЕМ РЕАЛЬНОГО ВРЕМЕНИ С КОММУТАТОРОМ 
Фак-т. ВМиК МГУ им.М.В.Ломоносова, Москва,
 Email: kost@cs.msu.su,  steplg@gmail.com 
1. Введение. В работе сформулирована задача построения статических расписаний обменов без прерываний для вычислительных систем реального времени (ВСРВ) со средой обмена, построенной на основе коммутатора. Предложен алгоритм построения расписаний, использующий идеи алгоритмов решения японских кроссвордов. Актуальность формулировки задачи построения расписаний обменов для коммутатора, которая учитывает требования передачи сообщений в реальном времени, и разработки алгоритмов ее решения обусловлена тем, что многие разработчики ВСРВ рассматривают стандарт Fibre Channel [1] как основной для построения среды обмена [2]. Одной из базовых топологий стандарта является коммутатор.
2. Задача построения расписания обменов. Будем рассматривать среду обмена, состоящую из одного коммутатора и N подключенных к нему устройств . Каждое устройство одновременно может участвовать только в одном обмене.
Обмен данными в среде происходит путем передачи сообщений. На размер передаваемых в сообщении данных ограничений не накладывается. Каждое сообщение на уровне сети разбивается на набор кадров, длина данных в каждом из которых не превышает 2112 байт и кратно четырем. Эти условия накладываются стандартом Fibre Channel, однако не являются принципиальными и могут быть изменены под конкретный стандарт организации сетевого обмена. 
Мы будем рассматривать организацию сетевого обмена с установлением соединения и с подтверждением о доставке каждого кадра. Любая передача сообщения должна будет начинаться с отправки устройством-источником служебного сообщения на установление соединения устройству-приемнику, а в конце передачи сообщения источник будет обязан дождаться подтверждения о доставке и закрытии соединения от приемника. Эти служебные сообщения в соответствии со стандартом Fibre Channel помечаются определенными флагами в заголовке сообщения.
Время доставки одного кадра, содержащего в себе  байт данных от устройства  до устройства :
,
где  – длина канала от устройства-источника до коммутатора,  – длина канала от устройства-приемника до коммутатора  – задержка на коммутаторе,  – частота передачи устройством данных в сеть,  – скорость передачи данных по сети.
Набор сообщений, представляет собой множество . Каждому сообщению сопоставлены следующие атрибуты:
 (байт) — размер передаваемых данных,
 — номер устройства-источника,
— номер устройства-приемника, 
— директивный срок начала передачи сообщения,
— директивный срок получения сообщения.
Время необходимое для передачи одного сообщения составит:
,
где  – количество байт в первом кадре, – количество фреймов, требуемых для передачи сообщения, – максимальный возможный размер передаваемых данных в кадре.
Расписание, соответствующее набору сообщений M, представляет собой множество , в состав которого входят сообщения из M (все или часть). Каждому сообщению  сопоставлен атрибут – время начала передачи сообщения . 
Будем называть расписание корректным, если выполняются следующие условия: 
1. Передача сообщения должна выполняться в рамках директивного интервала:

2. В любой момент времени любое оконечное устройство может участвовать только в одном обмене:

Пусть задан набор сообщений  и характеристики среды обменов: . Требуется построить расписание передачи сообщений такое что , где  – множество всех возможных корректных расписаний для заданных  и .
Если рассмотреть частный случай сформулированной задачи для одного коммутатора и двух устройств, то он полиномиально сводится к задаче построения расписания обменов для двух устройств, соединенных шиной с централизованным управлением. Данная задача является NP-трудной задачей построения однопроцессорного расписания без прерывания для заданного набора работ с индивидуальными директивными сроками выполнения [3]. Отсюда можно сделать вывод о принадлежности сформулированной задачи к классу NP-трудных задач.
3. Алгоритм японских кроссвордов и идея его применения для построения расписаний обменов. В японском кроссворде в отличие от обычного кроссворда, зашифрованы не слова, а изображение. Поле кроссворда представляет собой расчерченный на клетки лист фиксированного размера. При решении японского кроссворда необходимо восстановить картинку по числам, которые проставлены слева от строк и над колонками. Числа в сетке японского кроссворда показывают, в какой последовательности должны быть расположены группы черных клеток в соответствующей строке или столбце и сколько слитных черных клеток содержит каждая группа. При этом между двумя последовательными группами должна быть как минимум одна пустая клетка.
Основная идея решения японских кроссвордов [4] заключается в том, чтобы по заданным длинам групп вычислить те области, которые либо точно будут закрашены, либо точно останутся пустыми. Итеративно повторяя данный процесс, возможно «раскрасить» все поле японского кроссворда.
Рассмотрим, как можно применить идею алгоритмов решения японских кроссвордов для нахождения аналогичных участков (область точного размещения и область точного неразмещения соответственно) в расписании обменов. На рисунке 1 приведен пример задания исходных данных для алгоритма. Различными штриховками обозначаются три разных сообщения. Вертикальные линии отмеряют такты, горизонтальные линии соответствуют портам . Директивные интервалы могут пересекаться, что изображается в виде пересечений соответствующих прямоугольников. Так же в передаче одного сообщения участвуют всегда ровно два порта – именно поэтому для каждого сообщения всегда существует ровно два прямоугольника, расположенных на двух разных портах и занимающих один и тот же промежуток времени. Т.е. возможные клетки для закрашивания определяются директивными интервалами сообщений, количество групп на каждой линии определяется числом сообщений, которым требуется для передачи сообщения соответствующий линии порт, длина группы определяется временем передачи соответствующего сообщения.


Рисунок 1. Расположение директивных интервалов на диаграмме состояний портов.
Алгоритм японских кроссвордов работает в предположении, что всегда существует решение, в котором все заданные группы черных клеток размещены. Однако для сформулированной в разделе 2 задачи построения расписания обменов может не существовать корректного расписания, содержащего все сообщения из заданного исходного набора. В следующем разделе предложен алгоритм, учитывающий это отличие задач построения расписаний и задач решения японских кроссвордов, а также учитывающий, что при размещении сообщения закрашиваются две линии.
3. Алгоритм построения расписания обменов, использующий алгоритм решения японских кроссвордов. Окном будем называть директивный интервал для заданного сообщения. Связанным с окном сообщением будем называть сообщение, которое должно быть размещено в рамках выбранного окна. Область окна — интервал, целиком лежащий внутри заданного окна, которому приписано одно из состояний: 
занято — в данный промежуток времени уже передается какое-то сообщение на одном из портов, который требуется для передачи связного с окном сообщения, 
используется — в данный промежуток времени передается связное с окном сообщение, 
неопределено — ни один из предыдущих пунктов. 
Назовем i-тое окно связанным с k-той областью j-того окна, если интервалы i-того окна и k-той области j-того окна пересекаются, а сообщения, связанные с i-тым и j-тым окном, претендуют на один и тот же порт.

Рисунок 2. Промежуточный этап работы алгоритма японских кроссвордов.
На рисунке 2 показан промежуточный этап работы алгоритма японских кроссвордов. Директивные интервалы обозначаются прямоугольной рамкой, две области точного размещения (для первого и второго сообщений) обозначаются темной штриховкой, две области точного неразмещения (для первого и третьего сообщений) обозначаются незакрашеными прямоугольниками, три неопределенные области (для второго и третьего сообщений) обозначаются светлой штриховкой.
Схему алгоритма можно представить следующим образом:
I. Начальная инициализация. 
1. Для каждого окна (количество окон равно числу сообщений в исходно заданном наборе M) создаем одну область, которая совпадает с самим окном и имеет статус «неопределено». 
2. Помечаем все окна, как обновленные.
II. Построение областей точного размещения (статус области «используется») и точного неразмещения (статус области «занято»). 
1. Вызвать операцию выбора обновленного окна.
2. Вычислить для выбранного окна область точного размещения, используя стратегии решения японских кроссвордов [4]: простые блоки (simple boxes), простые пробелы (simple spaces), форсирование (forcing).
3. Если границы и набор областей окна изменились, то для каждой области окна, которая изменила свое состояние в связных с ней окнах обновить границы и статус соответствующих областей на «занято» и пометить окна как обновленные.
4. Если сообщение связное с выбранным окном невозможно разместить в расписание без нарушения ограничений на корректность, то: 1)поместить его в список неразмещенных, 2)удалить соответствующее ему окно из множества окон. (Примечание: при этом возможно изменение статусов и границ областей, связанных с областями удаленного окна со статусом «используется». В данной версии алгоритма это не используется.).
5. Проверить «полностью ли размещено сообщение, связное с выбранным окном» (т.е. длина области окна со статусом «используется» равна времени передачи, связного с окном сообщения). Если да, то исключить окно из множества окон. 
6. Если есть обновленные окна, то переход к п. II.1.
III. Эвристическое заполнение областей со статусом «неопределено». 
1. Если множество окон не пусто (т.е. в каждом из них есть области со статусом «неопределено»), то переход к п.III.2, иначе завершить работу алгоритма.
2. Вызов операции выбора области окна такой, что или справа, или слева от нее располагалась область со статусом «используется».
3. Изменение статуса выбранной области на статус «используется» и переход к пункту II.4.
Эвристическая операция выбора обновленного окна. Выбираем такое окно, для которого среднее значение профиля по всем его областям со статусом «неопределенно» минимально. Под профилем здесь понимается функция двух переменных . Значением функции в каждой точке является количество неопределенных областей для порта p в момент времени .
Эвристическая операция выбора области окна. Выбираем такую область окна со статусом «неопределенно», рядом с которой находится область со статусом «используется», для которой среднее значение профиля минимально.
В качестве критериев выбора окна в этих операциях могут также использоваться и критерии, имеющие меньшую вычислительную сложность: выбор такого окна, что связное с ним сообщение имеет минимально возможное время завершения передачи или минимальный директивный срок получения сообщения.
В случае, если не существует полного расписания (включающего все сообщения из заданного набора), порядок выбора окон будет влиять на результат, то есть на то, какие сообщения попадут в расписание, а какие в список неразмещенных. А значит критерий выбора окна, будет влиять на точность алгоритма. Подбирая критерий, по которому будет выбираться окно, можно осуществлять настройку алгоритма на частные задачи сформулированной в разделе 2 задачи построения расписания обменов. Частная задача получается путем введения дополнительных ограничений на исходные данные.
Верхняя оценка сложности алгоритма равна , где , - количество портов. Однако реальная сложность алгоритма для большинства частных задач, у которых среднее значение значительно меньше ее верхней оценки, при этом, чем меньше значение, тем меньше сложность алгоритма. Кроме того, для задач, имеющих полное корректное расписание, уменьшение  приводит к увеличению точности работы алгоритма.
1. FC-FS _ стандарт Fibre Channel «Framing and Signalling» [PDF] ftp://ftp.t11.org/t11/pub/fc/fs/98-146v1.pdf.
2. Павлов А.М. Коммерческая сетевая информационная технология для применения в военных проектах// Мир компьютерной автоматизации. 2000. № 4.
3. Гэри М., Джонсон Д. Вычислительные машины и трудно решаемые задачи. - М.: Мир, 1982.
4. Ueda, Nobuhisa; Nagao, Tadaaki (1996), NP-completeness results for NONOGRAM via Parsimonious Peduction, TR-96-0008, Technical Report, Departament of Computer Science, Tokyo Institute of Technology.